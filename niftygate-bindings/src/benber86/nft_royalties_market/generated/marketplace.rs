#[allow(dead_code)]
pub mod marketplace {
    # [rustfmt :: skip] use ethcontract as ethcontract ;
    #[doc = "Generated by `ethcontract`"]
    #[derive(Clone)]
    pub struct Contract {
        methods: Methods,
    }
    impl Contract {
        #[doc = r" Retrieves the raw contract instance used to generate the type safe"]
        #[doc = r" API for this contract."]
        pub fn raw_contract() -> &'static self::ethcontract::Contract {
            use self::ethcontract::common::artifact::truffle::TruffleLoader;
            use self::ethcontract::private::lazy_static;
            use self::ethcontract::Contract;
            lazy_static! {
                pub static ref CONTRACT: Contract = {
                    # [allow (unused_mut)] let mut contract = TruffleLoader :: new () . load_contract_from_str ("{\"contractName\":\"Marketplace\",\"abi\":[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"tokenContractAddress\",\"type\":\"address\"}]},{\"type\":\"function\",\"name\":\"_tokenContractAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"buyOffersEscrow\",\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"makeBuyOffer\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"acceptBuyOffer\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"activeBuyOffers\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"createTime\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"withdrawBuyOffer\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"purchase\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"activeSellOffers\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"minPrice\",\"type\":\"uint256\"}],\"constant\":false,\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"makeSellOffer\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"minPrice\",\"type\":\"uint256\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdrawSellOffer\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"outputs\":[],\"constant\":false,\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"NewBuyOffer\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"buyer\",\"type\":\"address\",\"indexed\":false},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SellOfferWithdrawn\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"seller\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoyaltiesPaid\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BuyOfferWithdrawn\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"buyer\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"NewSellOffer\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"seller\",\"type\":\"address\",\"indexed\":false},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Sale\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"seller\",\"type\":\"address\",\"indexed\":false},{\"name\":\"buyer\",\"type\":\"address\",\"indexed\":false},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false}],\"bytecode\":\"\",\"networks\":{},\"devdoc\":{\"details\":null,\"methods\":{}},\"userdoc\":{\"details\":null,\"methods\":{}}}") . expect ("valid contract JSON") ;
                    contract
                };
            }
            &CONTRACT
        }
        #[doc = r" Creates a new contract instance with the specified `web3`"]
        #[doc = r" provider at the given `Address`."]
        #[doc = r""]
        #[doc = r" Note that this does not verify that a contract with a matching"]
        #[doc = r" `Abi` is actually deployed at the given address."]
        pub fn at<F, B, T>(
            web3: &self::ethcontract::web3::api::Web3<T>,
            address: self::ethcontract::Address,
        ) -> Self
        where
            F: std::future::Future<
                    Output = Result<self::ethcontract::json::Value, self::ethcontract::web3::Error>,
                > + Send
                + 'static,
            B: std::future::Future<
                    Output = Result<
                        Vec<Result<self::ethcontract::json::Value, self::ethcontract::web3::Error>>,
                        self::ethcontract::web3::Error,
                    >,
                > + Send
                + 'static,
            T: self::ethcontract::web3::Transport<Out = F>
                + self::ethcontract::web3::BatchTransport<Batch = B>
                + Send
                + Sync
                + 'static,
        {
            Contract::with_deployment_info(web3, address, None)
        }
        #[doc = r" Creates a new contract instance with the specified `web3` provider with"]
        #[doc = r" the given `Abi` at the given `Address` and an optional transaction hash."]
        #[doc = r" This hash is used to retrieve contract related information such as the"]
        #[doc = r" creation block (which is useful for fetching all historic events)."]
        #[doc = r""]
        #[doc = r" Note that this does not verify that a contract with a matching `Abi` is"]
        #[doc = r" actually deployed at the given address nor that the transaction hash,"]
        #[doc = r" when provided, is actually for this contract deployment."]
        pub fn with_deployment_info<F, B, T>(
            web3: &self::ethcontract::web3::api::Web3<T>,
            address: self::ethcontract::Address,
            deployment_information: Option<ethcontract::common::DeploymentInformation>,
        ) -> Self
        where
            F: std::future::Future<
                    Output = Result<self::ethcontract::json::Value, self::ethcontract::web3::Error>,
                > + Send
                + 'static,
            B: std::future::Future<
                    Output = Result<
                        Vec<Result<self::ethcontract::json::Value, self::ethcontract::web3::Error>>,
                        self::ethcontract::web3::Error,
                    >,
                > + Send
                + 'static,
            T: self::ethcontract::web3::Transport<Out = F>
                + self::ethcontract::web3::BatchTransport<Batch = B>
                + Send
                + Sync
                + 'static,
        {
            use self::ethcontract::transport::DynTransport;
            use self::ethcontract::web3::api::Web3;
            use self::ethcontract::Instance;
            let transport = DynTransport::new(web3.transport().clone());
            let web3 = Web3::new(transport);
            let abi = Self::raw_contract().abi.clone();
            let instance =
                Instance::with_deployment_info(web3, abi, address, deployment_information);
            Contract::from_raw(instance)
        }
        #[doc = r" Creates a contract from a raw instance."]
        fn from_raw(instance: self::ethcontract::dyns::DynInstance) -> Self {
            let methods = Methods { instance };
            Contract { methods }
        }
        #[doc = r" Returns the contract address being used by this instance."]
        pub fn address(&self) -> self::ethcontract::Address {
            self.raw_instance().address()
        }
        #[doc = r" Returns the deployment information of the contract"]
        #[doc = r" if it is known, `None` otherwise."]
        pub fn deployment_information(&self) -> Option<ethcontract::common::DeploymentInformation> {
            self.raw_instance().deployment_information()
        }
        #[doc = r" Returns a reference to the default method options used by this"]
        #[doc = r" contract."]
        pub fn defaults(&self) -> &self::ethcontract::contract::MethodDefaults {
            &self.raw_instance().defaults
        }
        #[doc = r" Returns a mutable reference to the default method options used"]
        #[doc = r" by this contract."]
        pub fn defaults_mut(&mut self) -> &mut self::ethcontract::contract::MethodDefaults {
            &mut self.raw_instance_mut().defaults
        }
        #[doc = r" Returns a reference to the raw runtime instance used by this"]
        #[doc = r" contract."]
        pub fn raw_instance(&self) -> &self::ethcontract::dyns::DynInstance {
            &self.methods.instance
        }
        #[doc = r" Returns a mutable reference to the raw runtime instance used by"]
        #[doc = r" this contract."]
        fn raw_instance_mut(&mut self) -> &mut self::ethcontract::dyns::DynInstance {
            &mut self.methods.instance
        }
    }
    impl std::fmt::Debug for Contract {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(Marketplace))
                .field(&self.address())
                .finish()
        }
    }
    impl Contract {
        #[doc = "Generated by `ethcontract`"]
        #[allow(clippy::too_many_arguments)]
        pub fn builder<F, B, T>(
            web3: &self::ethcontract::web3::api::Web3<T>,
            token_contract_address: self::ethcontract::Address,
        ) -> self::ethcontract::dyns::DynDeployBuilder<Self>
        where
            F: std::future::Future<
                    Output = Result<self::ethcontract::json::Value, self::ethcontract::web3::Error>,
                > + Send
                + 'static,
            B: std::future::Future<
                    Output = Result<
                        Vec<Result<self::ethcontract::json::Value, self::ethcontract::web3::Error>>,
                        self::ethcontract::web3::Error,
                    >,
                > + Send
                + 'static,
            T: self::ethcontract::web3::Transport<Out = F>
                + self::ethcontract::web3::BatchTransport<Batch = B>
                + Send
                + Sync
                + 'static,
        {
            use self::ethcontract::contract::DeployBuilder;
            use self::ethcontract::dyns::DynTransport;
            use self::ethcontract::web3::api::Web3;
            let transport = DynTransport::new(web3.transport().clone());
            let web3 = Web3::new(transport);
            let bytecode = Self::raw_contract().bytecode.clone();
            DeployBuilder::new(web3, bytecode, (token_contract_address,))
                .expect("valid deployment args")
        }
    }
    impl self::ethcontract::contract::Deploy<self::ethcontract::dyns::DynTransport> for Contract {
        type Context = self::ethcontract::common::Bytecode;
        fn bytecode(cx: &Self::Context) -> &self::ethcontract::common::Bytecode {
            cx
        }
        fn abi(_: &Self::Context) -> &self::ethcontract::common::Abi {
            &Self::raw_contract().abi
        }
        fn from_deployment(
            web3: self::ethcontract::dyns::DynWeb3,
            address: self::ethcontract::Address,
            transaction_hash: self::ethcontract::H256,
            _: Self::Context,
        ) -> Self {
            Self::with_deployment_info(&web3, address, Some(transaction_hash.into()))
        }
    }
    impl Contract {
        #[doc = r" Returns an object that allows accessing typed method signatures."]
        pub fn signatures() -> Signatures {
            Signatures
        }
        #[doc = r" Retrieves a reference to type containing all the generated"]
        #[doc = r" contract methods. This can be used for methods where the name"]
        #[doc = r" would collide with a common method (like `at` or `deployed`)."]
        pub fn methods(&self) -> &Methods {
            &self.methods
        }
    }
    #[doc = r" Type containing signatures for all methods for generated contract type."]
    #[derive(Clone, Copy)]
    pub struct Signatures;
    impl Signatures {
        #[doc = "Returns signature for method `_tokenContractAddress():(address)`."]
        #[allow(clippy::type_complexity)]
        pub fn token_contract_address(
            &self,
        ) -> self::ethcontract::contract::Signature<(), self::ethcontract::Address> {
            self::ethcontract::contract::Signature::new([92, 240, 52, 111])
        }
        #[doc = "Returns signature for method `buyOffersEscrow(address,uint256):(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn buy_offers_escrow(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::Address, self::ethcontract::U256),
            self::ethcontract::U256,
        > {
            self::ethcontract::contract::Signature::new([5, 214, 175, 147])
        }
        #[doc = "Returns signature for method `makeBuyOffer(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn make_buy_offer(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::U256,), ()> {
            self::ethcontract::contract::Signature::new([72, 191, 124, 106])
        }
        #[doc = "Returns signature for method `acceptBuyOffer(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn accept_buy_offer(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::U256,), ()> {
            self::ethcontract::contract::Signature::new([69, 80, 35, 73])
        }
        #[doc = "Returns signature for method `activeBuyOffers(uint256):(address,uint256,uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn active_buy_offers(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::U256,),
            (
                self::ethcontract::Address,
                self::ethcontract::U256,
                self::ethcontract::U256,
            ),
        > {
            self::ethcontract::contract::Signature::new([176, 229, 105, 239])
        }
        #[doc = "Returns signature for method `withdrawBuyOffer(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn withdraw_buy_offer(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::U256,), ()> {
            self::ethcontract::contract::Signature::new([90, 18, 59, 172])
        }
        #[doc = "Returns signature for method `purchase(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn purchase(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::U256,), ()> {
            self::ethcontract::contract::Signature::new([239, 239, 57, 161])
        }
        #[doc = "Returns signature for method `activeSellOffers(uint256):(address,uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn active_sell_offers(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::U256,),
            (self::ethcontract::Address, self::ethcontract::U256),
        > {
            self::ethcontract::contract::Signature::new([3, 197, 86, 73])
        }
        #[doc = "Returns signature for method `makeSellOffer(uint256,uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn make_sell_offer(
            &self,
        ) -> self::ethcontract::contract::Signature<
            (self::ethcontract::U256, self::ethcontract::U256),
            (),
        > {
            self::ethcontract::contract::Signature::new([199, 40, 199, 94])
        }
        #[doc = "Returns signature for method `withdrawSellOffer(uint256)`."]
        #[allow(clippy::type_complexity)]
        pub fn withdraw_sell_offer(
            &self,
        ) -> self::ethcontract::contract::Signature<(self::ethcontract::U256,), ()> {
            self::ethcontract::contract::Signature::new([127, 73, 87, 211])
        }
    }
    #[doc = r" Type containing all contract methods for generated contract type."]
    #[derive(Clone)]
    pub struct Methods {
        instance: self::ethcontract::dyns::DynInstance,
    }
    #[allow(clippy::too_many_arguments, clippy::type_complexity)]
    impl Methods {
        #[doc = "Generated by `ethcontract`"]
        pub fn token_contract_address(
            &self,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::Address> {
            self.instance
                .view_method([92, 240, 52, 111], ())
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn buy_offers_escrow(
            &self,
            p0: self::ethcontract::Address,
            p1: self::ethcontract::U256,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<self::ethcontract::U256> {
            self.instance
                .view_method([5, 214, 175, 147], (p0, p1))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn make_buy_offer(
            &self,
            token_id: self::ethcontract::U256,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([72, 191, 124, 106], (token_id,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn accept_buy_offer(
            &self,
            token_id: self::ethcontract::U256,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([69, 80, 35, 73], (token_id,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn active_buy_offers(
            &self,
            p0: self::ethcontract::U256,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<(
            self::ethcontract::Address,
            self::ethcontract::U256,
            self::ethcontract::U256,
        )> {
            self.instance
                .view_method([176, 229, 105, 239], (p0,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn withdraw_buy_offer(
            &self,
            token_id: self::ethcontract::U256,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([90, 18, 59, 172], (token_id,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn purchase(
            &self,
            token_id: self::ethcontract::U256,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([239, 239, 57, 161], (token_id,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn active_sell_offers(
            &self,
            p0: self::ethcontract::U256,
        ) -> self::ethcontract::dyns::DynViewMethodBuilder<(
            self::ethcontract::Address,
            self::ethcontract::U256,
        )> {
            self.instance
                .view_method([3, 197, 86, 73], (p0,))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn make_sell_offer(
            &self,
            token_id: self::ethcontract::U256,
            min_price: self::ethcontract::U256,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([199, 40, 199, 94], (token_id, min_price))
                .expect("generated call")
        }
        #[doc = "Generated by `ethcontract`"]
        pub fn withdraw_sell_offer(
            &self,
            token_id: self::ethcontract::U256,
        ) -> self::ethcontract::dyns::DynMethodBuilder<()> {
            self.instance
                .method([127, 73, 87, 211], (token_id,))
                .expect("generated call")
        }
    }
    impl std::ops::Deref for Contract {
        type Target = Methods;
        fn deref(&self) -> &Self::Target {
            &self.methods
        }
    }
    #[doc = r" Module containing all generated data models for this contract's"]
    #[doc = r" events."]
    pub mod event_data {
        use super::ethcontract;
        #[derive(
            Clone, Debug, Default, Eq, PartialEq, serde :: Deserialize, serde :: Serialize,
        )]
        pub struct NewBuyOffer {
            pub token_id: self::ethcontract::U256,
            pub buyer: self::ethcontract::Address,
            pub value: self::ethcontract::U256,
        }
        impl NewBuyOffer {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    209, 208, 244, 87, 247, 9, 203, 237, 15, 51, 96, 222, 230, 5, 13, 222, 26, 10,
                    196, 112, 98, 104, 255, 33, 174, 202, 232, 126, 109, 219, 40, 97,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`NewBuyOffer(uint256,address,uint256)`"]
            pub fn abi_signature() -> &'static str {
                "NewBuyOffer(uint256,address,uint256)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for NewBuyOffer {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (token_id, buyer, value) =
                    self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(NewBuyOffer {
                    token_id,
                    buyer,
                    value,
                })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(
            Clone, Debug, Default, Eq, PartialEq, serde :: Deserialize, serde :: Serialize,
        )]
        pub struct SellOfferWithdrawn {
            pub token_id: self::ethcontract::U256,
            pub seller: self::ethcontract::Address,
        }
        impl SellOfferWithdrawn {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    14, 233, 241, 95, 167, 178, 76, 196, 123, 122, 216, 241, 171, 126, 186, 153,
                    129, 108, 41, 183, 54, 84, 252, 115, 218, 49, 106, 248, 79, 199, 78, 83,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`SellOfferWithdrawn(uint256,address)`"]
            pub fn abi_signature() -> &'static str {
                "SellOfferWithdrawn(uint256,address)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for SellOfferWithdrawn {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (token_id, seller) = self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(SellOfferWithdrawn { token_id, seller })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(
            Clone, Debug, Default, Eq, PartialEq, serde :: Deserialize, serde :: Serialize,
        )]
        pub struct RoyaltiesPaid {
            pub token_id: self::ethcontract::U256,
            pub value: self::ethcontract::U256,
        }
        impl RoyaltiesPaid {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    230, 26, 242, 38, 156, 154, 251, 219, 105, 239, 206, 43, 21, 242, 164, 100,
                    248, 238, 98, 55, 241, 5, 179, 212, 2, 79, 46, 130, 74, 159, 10, 243,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`RoyaltiesPaid(uint256,uint256)`"]
            pub fn abi_signature() -> &'static str {
                "RoyaltiesPaid(uint256,uint256)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for RoyaltiesPaid {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (token_id, value) = self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(RoyaltiesPaid { token_id, value })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(
            Clone, Debug, Default, Eq, PartialEq, serde :: Deserialize, serde :: Serialize,
        )]
        pub struct BuyOfferWithdrawn {
            pub token_id: self::ethcontract::U256,
            pub buyer: self::ethcontract::Address,
        }
        impl BuyOfferWithdrawn {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    205, 232, 239, 184, 133, 246, 30, 48, 35, 175, 207, 180, 232, 1, 236, 164, 121,
                    11, 8, 180, 215, 112, 110, 169, 231, 251, 98, 7, 58, 9, 87, 74,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`BuyOfferWithdrawn(uint256,address)`"]
            pub fn abi_signature() -> &'static str {
                "BuyOfferWithdrawn(uint256,address)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for BuyOfferWithdrawn {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (token_id, buyer) = self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(BuyOfferWithdrawn { token_id, buyer })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(
            Clone, Debug, Default, Eq, PartialEq, serde :: Deserialize, serde :: Serialize,
        )]
        pub struct NewSellOffer {
            pub token_id: self::ethcontract::U256,
            pub seller: self::ethcontract::Address,
            pub value: self::ethcontract::U256,
        }
        impl NewSellOffer {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    254, 187, 118, 190, 24, 115, 223, 59, 86, 232, 102, 163, 76, 124, 44, 82, 79,
                    24, 130, 29, 31, 236, 66, 82, 174, 47, 232, 177, 31, 194, 2, 208,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`NewSellOffer(uint256,address,uint256)`"]
            pub fn abi_signature() -> &'static str {
                "NewSellOffer(uint256,address,uint256)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for NewSellOffer {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (token_id, seller, value) =
                    self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(NewSellOffer {
                    token_id,
                    seller,
                    value,
                })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
        #[derive(
            Clone, Debug, Default, Eq, PartialEq, serde :: Deserialize, serde :: Serialize,
        )]
        pub struct Sale {
            pub token_id: self::ethcontract::U256,
            pub seller: self::ethcontract::Address,
            pub buyer: self::ethcontract::Address,
            pub value: self::ethcontract::U256,
        }
        impl Sale {
            #[doc = r" Retrieves the signature for the event this data corresponds to."]
            #[doc = r" This signature is the Keccak-256 hash of the ABI signature of"]
            #[doc = r" this event."]
            pub fn signature() -> self::ethcontract::H256 {
                self::ethcontract::H256([
                    136, 134, 61, 94, 32, 246, 68, 100, 181, 84, 147, 19, 148, 226, 228, 182, 240,
                    156, 16, 1, 81, 71, 33, 91, 242, 107, 59, 165, 7, 10, 206, 190,
                ])
            }
            #[doc = r" Retrieves the ABI signature for the event this data corresponds"]
            #[doc = r" to. For this event the value should always be:"]
            #[doc = r""]
            #[doc = "`Sale(uint256,address,address,uint256)`"]
            pub fn abi_signature() -> &'static str {
                "Sale(uint256,address,address,uint256)"
            }
        }
        impl self::ethcontract::tokens::Tokenize for Sale {
            fn from_token(
                token: self::ethcontract::common::abi::Token,
            ) -> Result<Self, self::ethcontract::tokens::Error> {
                let (token_id, seller, buyer, value) =
                    self::ethcontract::tokens::Tokenize::from_token(token)?;
                Ok(Sale {
                    token_id,
                    seller,
                    buyer,
                    value,
                })
            }
            fn into_token(self) -> self::ethcontract::common::abi::Token {
                unimplemented!("events are only decoded, not encoded")
            }
        }
    }
    impl Contract {
        #[doc = r" Retrieves a handle to a type containing for creating event"]
        #[doc = r" streams for all the contract events."]
        pub fn events(&self) -> Events<'_> {
            Events {
                instance: self.raw_instance(),
            }
        }
    }
    pub struct Events<'a> {
        instance: &'a self::ethcontract::dyns::DynInstance,
    }
    impl Events<'_> {
        #[doc = r" Generated by `ethcontract`."]
        pub fn new_buy_offer(&self) -> self::event_builders::NewBuyOfferBuilder {
            self::event_builders::NewBuyOfferBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        209, 208, 244, 87, 247, 9, 203, 237, 15, 51, 96, 222, 230, 5, 13, 222, 26,
                        10, 196, 112, 98, 104, 255, 33, 174, 202, 232, 126, 109, 219, 40, 97,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn sell_offer_withdrawn(&self) -> self::event_builders::SellOfferWithdrawnBuilder {
            self::event_builders::SellOfferWithdrawnBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        14, 233, 241, 95, 167, 178, 76, 196, 123, 122, 216, 241, 171, 126, 186,
                        153, 129, 108, 41, 183, 54, 84, 252, 115, 218, 49, 106, 248, 79, 199, 78,
                        83,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn royalties_paid(&self) -> self::event_builders::RoyaltiesPaidBuilder {
            self::event_builders::RoyaltiesPaidBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        230, 26, 242, 38, 156, 154, 251, 219, 105, 239, 206, 43, 21, 242, 164, 100,
                        248, 238, 98, 55, 241, 5, 179, 212, 2, 79, 46, 130, 74, 159, 10, 243,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn buy_offer_withdrawn(&self) -> self::event_builders::BuyOfferWithdrawnBuilder {
            self::event_builders::BuyOfferWithdrawnBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        205, 232, 239, 184, 133, 246, 30, 48, 35, 175, 207, 180, 232, 1, 236, 164,
                        121, 11, 8, 180, 215, 112, 110, 169, 231, 251, 98, 7, 58, 9, 87, 74,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn new_sell_offer(&self) -> self::event_builders::NewSellOfferBuilder {
            self::event_builders::NewSellOfferBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        254, 187, 118, 190, 24, 115, 223, 59, 86, 232, 102, 163, 76, 124, 44, 82,
                        79, 24, 130, 29, 31, 236, 66, 82, 174, 47, 232, 177, 31, 194, 2, 208,
                    ]))
                    .expect("generated event filter"),
            )
        }
        #[doc = r" Generated by `ethcontract`."]
        pub fn sale(&self) -> self::event_builders::SaleBuilder {
            self::event_builders::SaleBuilder(
                self.instance
                    .event(self::ethcontract::H256([
                        136, 134, 61, 94, 32, 246, 68, 100, 181, 84, 147, 19, 148, 226, 228, 182,
                        240, 156, 16, 1, 81, 71, 33, 91, 242, 107, 59, 165, 7, 10, 206, 190,
                    ]))
                    .expect("generated event filter"),
            )
        }
    }
    #[doc = r" Module containing the generated event stream builders with type safe"]
    #[doc = r" filter methods for this contract's events."]
    pub mod event_builders {
        use super::ethcontract;
        use super::event_data;
        #[doc = "A builder for creating a filtered stream of `NewBuyOffer` events."]
        pub struct NewBuyOfferBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::NewBuyOffer>,
        );
        impl NewBuyOfferBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::NewBuyOffer>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::NewBuyOffer>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `SellOfferWithdrawn` events."]
        pub struct SellOfferWithdrawnBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::SellOfferWithdrawn>,
        );
        impl SellOfferWithdrawnBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::SellOfferWithdrawn>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::SellOfferWithdrawn>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `RoyaltiesPaid` events."]
        pub struct RoyaltiesPaidBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::RoyaltiesPaid>,
        );
        impl RoyaltiesPaidBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::RoyaltiesPaid>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::RoyaltiesPaid>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `BuyOfferWithdrawn` events."]
        pub struct BuyOfferWithdrawnBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::BuyOfferWithdrawn>,
        );
        impl BuyOfferWithdrawnBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::BuyOfferWithdrawn>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::BuyOfferWithdrawn>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `NewSellOffer` events."]
        pub struct NewSellOfferBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::NewSellOffer>,
        );
        impl NewSellOfferBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::NewSellOffer>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::NewSellOffer>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
        #[doc = "A builder for creating a filtered stream of `Sale` events."]
        pub struct SaleBuilder(
            #[doc = r" The inner event builder."]
            pub  self::ethcontract::dyns::DynEventBuilder<self::event_data::Sale>,
        );
        impl SaleBuilder {
            #[doc = r" Sets the starting block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the latest block."]
            #[allow(clippy::wrong_self_convention)]
            pub fn from_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).from_block(block);
                self
            }
            #[doc = r" Sets the last block from which to stream logs for."]
            #[doc = r""]
            #[doc = r" If left unset defaults to the streaming until the end of days."]
            #[allow(clippy::wrong_self_convention)]
            pub fn to_block(mut self, block: self::ethcontract::BlockNumber) -> Self {
                self.0 = (self.0).to_block(block);
                self
            }
            #[doc = r" Limits the number of events that can be retrieved by this filter."]
            #[doc = r""]
            #[doc = r" Note that this parameter is non-standard."]
            pub fn limit(mut self, value: usize) -> Self {
                self.0 = (self.0).limit(value);
                self
            }
            #[doc = r" Sets the polling interval. This is used as the interval between"]
            #[doc = r" consecutive `eth_getFilterChanges` calls to get filter updates."]
            pub fn poll_interval(mut self, value: std::time::Duration) -> Self {
                self.0 = (self.0).poll_interval(value);
                self
            }
            #[doc = r" Returns a future that resolves with a collection of all existing"]
            #[doc = r" logs matching the builder parameters."]
            pub async fn query(
                self,
            ) -> std::result::Result<
                std::vec::Vec<self::ethcontract::Event<self::event_data::Sale>>,
                self::ethcontract::errors::EventError,
            > {
                (self.0).query().await
            }
            #[doc = r" Creates an event stream from the current event builder."]
            pub fn stream(
                self,
            ) -> impl self::ethcontract::futures::stream::Stream<
                Item = std::result::Result<
                    self::ethcontract::StreamEvent<self::event_data::Sale>,
                    self::ethcontract::errors::EventError,
                >,
            > {
                (self.0).stream()
            }
        }
    }
    impl Contract {
        #[doc = r" Returns a log stream with all events."]
        pub fn all_events(&self) -> self::ethcontract::dyns::DynAllEventsBuilder<Event> {
            self::ethcontract::dyns::DynAllEventsBuilder::new(
                self.raw_instance().web3(),
                self.address(),
                self.deployment_information(),
            )
        }
    }
    #[doc = r" A contract event."]
    #[derive(Clone, Debug, Eq, PartialEq, serde :: Deserialize, serde :: Serialize)]
    pub enum Event {
        BuyOfferWithdrawn(self::event_data::BuyOfferWithdrawn),
        NewBuyOffer(self::event_data::NewBuyOffer),
        NewSellOffer(self::event_data::NewSellOffer),
        RoyaltiesPaid(self::event_data::RoyaltiesPaid),
        Sale(self::event_data::Sale),
        SellOfferWithdrawn(self::event_data::SellOfferWithdrawn),
    }
    impl self::ethcontract::contract::ParseLog for Event {
        fn parse_log(
            log: self::ethcontract::RawLog,
        ) -> Result<Self, self::ethcontract::errors::ExecutionError> {
            let standard_event = log . topics . get (0) . copied () . map (| topic | match topic { self :: ethcontract :: H256 ([205 , 232 , 239 , 184 , 133 , 246 , 30 , 48 , 35 , 175 , 207 , 180 , 232 , 1 , 236 , 164 , 121 , 11 , 8 , 180 , 215 , 112 , 110 , 169 , 231 , 251 , 98 , 7 , 58 , 9 , 87 , 74]) => Ok (Event :: BuyOfferWithdrawn (log . clone () . decode (Contract :: raw_contract () . abi . event ("BuyOfferWithdrawn") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([209 , 208 , 244 , 87 , 247 , 9 , 203 , 237 , 15 , 51 , 96 , 222 , 230 , 5 , 13 , 222 , 26 , 10 , 196 , 112 , 98 , 104 , 255 , 33 , 174 , 202 , 232 , 126 , 109 , 219 , 40 , 97]) => Ok (Event :: NewBuyOffer (log . clone () . decode (Contract :: raw_contract () . abi . event ("NewBuyOffer") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([254 , 187 , 118 , 190 , 24 , 115 , 223 , 59 , 86 , 232 , 102 , 163 , 76 , 124 , 44 , 82 , 79 , 24 , 130 , 29 , 31 , 236 , 66 , 82 , 174 , 47 , 232 , 177 , 31 , 194 , 2 , 208]) => Ok (Event :: NewSellOffer (log . clone () . decode (Contract :: raw_contract () . abi . event ("NewSellOffer") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([230 , 26 , 242 , 38 , 156 , 154 , 251 , 219 , 105 , 239 , 206 , 43 , 21 , 242 , 164 , 100 , 248 , 238 , 98 , 55 , 241 , 5 , 179 , 212 , 2 , 79 , 46 , 130 , 74 , 159 , 10 , 243]) => Ok (Event :: RoyaltiesPaid (log . clone () . decode (Contract :: raw_contract () . abi . event ("RoyaltiesPaid") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([136 , 134 , 61 , 94 , 32 , 246 , 68 , 100 , 181 , 84 , 147 , 19 , 148 , 226 , 228 , 182 , 240 , 156 , 16 , 1 , 81 , 71 , 33 , 91 , 242 , 107 , 59 , 165 , 7 , 10 , 206 , 190]) => Ok (Event :: Sale (log . clone () . decode (Contract :: raw_contract () . abi . event ("Sale") . expect ("generated event decode")) ?)) , self :: ethcontract :: H256 ([14 , 233 , 241 , 95 , 167 , 178 , 76 , 196 , 123 , 122 , 216 , 241 , 171 , 126 , 186 , 153 , 129 , 108 , 41 , 183 , 54 , 84 , 252 , 115 , 218 , 49 , 106 , 248 , 79 , 199 , 78 , 83]) => Ok (Event :: SellOfferWithdrawn (log . clone () . decode (Contract :: raw_contract () . abi . event ("SellOfferWithdrawn") . expect ("generated event decode")) ?)) , _ => Err (self :: ethcontract :: errors :: ExecutionError :: from (self :: ethcontract :: common :: abi :: Error :: InvalidData)) , }) ;
            if let Some(Ok(data)) = standard_event {
                return Ok(data);
            }
            Err(self::ethcontract::errors::ExecutionError::from(
                self::ethcontract::common::abi::Error::InvalidData,
            ))
        }
    }
}
pub use self::marketplace::Contract as Marketplace;
